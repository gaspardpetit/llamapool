// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWUWvrNhT+K+Y83Qte7OyWUfzWlrKVbSwQaB9KGIp0Gqu1JU06TpsF//chyXHSNEtS",
	"0g7GfRKWPknf952j47MErmujFSpyUCzBIW+spMWYl1hjmLpEZtFeNFQGQFiAAqZhGlKghfHfJZGBtm1T",
	"kOpBeyhJqvxKVbGaGa2r5GJ0AynM0TqpFRQwHOSDHNoUtEHFjIQCvg3ywTdIwTAqw/UZMzJzxAj91wzJ",
	"D9qgZSS1uhFQwM9IF0aOAyYFi85o5SL5H/PcD1wrQhW2MmMqycPm7NF5Gp0oFlaFkH6JVSPrLyHpzyHb",
	"YC9UTx+RU5Qq0HErDUU5kYGfX9kIxf1rA+8n7SQF19Q1s4tIPXFo52gT1+9eS84cWWT1McrHEXlQP+EL",
	"ZThHRT+sD18b0Il0ZKWa7RJ57bcm3dZ3aY0M/0Xus7ZPaF3GtVLe3v2K7yL6qgNviR7mQz9sBedZEi+l",
	"miUjq0lzXblIv+cXD006BsmXO5yONX9C+hpplsgqKv/eR+2XDnJiFpqN3FuCd6pxu4Ljr/mrkRYFFPcr",
	"3OSITP3j1y3tkXjCS+RPUe18mPGSUebrQ4V+X6BgtNshfaQd3Q6vSkZXG/BIDx1darH4zGe4dsFD2v+w",
	"BqQnv6dVKI59Rd7kZCMoyRdj9cviax81rKcohFSzg/G6XiO/g1Cd7Pzarjee11pg5fZVhtvh7xHzoaVB",
	"MAqzkrB2b5e5RUbe6yU8aFszggKkop/O1r9tqQhnaP1PWIodCZuuDNy59KxQ/DldHK5NUkB/Utrz2jjh",
	"bdXqJ5i1bLGXydZl/T3BnsknpMJv0lHSBf11DmRLKdpjEuFGhC7HshoJrQtXSs/Fdz6QgmKhzQrGvX40",
	"6Z7yMvnQ9Ppf58/uKKdwlp+dYAlaq+1hvhF2DKmQDYnSlDzoRon3t48h7+LJsbWKudTYquvKiyyrNGdV",
	"qR0V5/l5Du2k/ScAAP//HJibY/kLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
