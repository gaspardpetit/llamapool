// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTW/bOBD9K8KcEkBr2ZvFItAtCRbZoC0aIEUugVEw4sRiKpEsOXbjGvrvxZCyIjuJ",
	"P5AURdGTZc4bct57nJEWUJjaGo2aPOQL8FhMnaL5VVFijWHpFIVDdzKlMgBCAHK4DcuQAs0t/y+JLDRN",
	"k4LSd4ahpKjiSFWJWlhjquTk8gJSmKHzymjIYTQYDobQpGAsamEV5HA0GA6OIAUrqAzHZ8KqbIIanSDk",
	"BWs88a+xvKSMvpCQw6XxdGLV+RKYgsOvU/R0auSc4YXRhDpkCmsrVYTc7N5zJS0vEaJSKg6J6tLxGaRY",
	"B3JT7Lia23ssKLLlY5RDGSFhwVujfRTv7+HwZx4u0RdOWYpyLsnLZFkDMMhP61q4eQ+QLOvhcBCYxCTU",
	"O8FntD1HlvYTQ15Jz/ZILaA2EqvwpAhr/xSgRR0sb5l7ckpPYFX1m4gaP9GnWxDOifmTrPbw8Q66vlee",
	"EnOXtCmrmoZgjCQHLONhVLVEUVH5fZOo/7eQNxXVk6Cp365ai9uF/8d3a5xj4UlRYvElsp2NsqIUlPE0",
	"qZDz/OZevR6dlYLOevA/oGNTIHygDGeo6S9PDkW9utm6ZS9a0Y5pyG9WB/TNuBn3nWKRk54pyYF15mF+",
	"2Ln22IMv3dLr0YeIedNrKgWJDZ1fOORBxo93xtWCIAel6d9/Hl84ShNO0HGjK/mMeOlS92dD3zTKz7fz",
	"7X2iJHQ7pV1dvR32njyB+j59t6vZvVG05m+2ULLZxeQLGd69TtRI6Hw4UnEt/D6GtJ3IUZTVPko3XOPx",
	"m16d3/puvN7lc2xN7jzmUY6b3b2i5UfRr/o4iRXszdSjm6FLfJfdEc4eB+gW3lcRuJX9a4fzf5yatKl7",
	"MY0VrpMNO/BK7MOpq9rv7DzLKlOIqjSe8uPh8RCacfMjAAD//ynR/OrLCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
