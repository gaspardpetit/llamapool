// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWX2vbOhT/KuY8teAbO7eXS/FbW8q9ZRsLBNqHEoYincZqbUmTTtJmwd99SHLitMnS",
	"jLSDsSdh6ejo90c6PgvgujZaoSIHxQIc8qmVNB/yEmsMU+fILNqzKZUhICxAAeMwDSnQ3PjvkshA0zQp",
	"SHWnfShJqvxKVbGaGa2r5GxwBSnM0DqpFRTQ7+W9HJoUtEHFjIQCTnp57wRSMIzKcHzGjMwcMUL/NUHy",
	"gzZoGUmtrgQU8B/SmZHDEJOCRWe0chH833nuB64VoQpbmTGV5GFzdu88jJYUC6tCSL/EqoH1h5D0echO",
	"cUVUj++RU6Qq0HErDUU6EYGfX8oIxe1zAW9HzSgFN61rZucReuLQztAmbrW7o5w5ssjqfZgPY+Sr/Amf",
	"KMMZKvqrS94J0JJ0ZKWabCN56bcm7daf4hoR/oDuo7YPaF3GtVJe3t2Mb2L0RRv8gnQ/7/vhhTmPkngp",
	"1SQZWE2a68pF+Ct8MWnSIkiObnA81PwB6TjCLJFVVH7bBe3/NuTAW2jW7t4CvFJTt80cf8zXqbQooLhd",
	"xo32uKmfP7zgHoEnvET+ENnO+hkvGWW+PlTo9wUIRrst1Afa0XX/omR0sRYe4aGjcy3m7/kMOxV8SPML",
	"a0B68HtaWrHvK/IiJ2umJEfG6qf58co1rMcohFSTV/267CL/AKsOVr6Ta0PzWgus3K7KcN3/FGPetDQI",
	"RmFWEtZuc5lbZOS1XsCdtjUjKEAq+vef7rctFeEErf8JS7HlwqZLAbcuPSoUX8bz12uTFLDKlK5wrWXY",
	"rFqrCWYtm29kDNRH72DzR+koaQ197m+2kKLZx+QrEToYy2oktC4cKT0W39VACoqFFiqI8vxBpDtKx+hN",
	"r85vfTcOd9k3XsHVmCw2JdGpqa3afrbIskpzVpXaUXGan+bQjJrvAQAA//8HWlRXMwsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
