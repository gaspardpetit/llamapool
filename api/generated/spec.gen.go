// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW3U7bTBB9FWuuQPIXOx9VhXwHqGpRWzVSJLhAUbVZD/GCvbudnQTSyO9e7a7zA6Qh",
	"CFqpV5Z3fvacOTMeL0CaxhqNmh0UC3Aop6R4PpQVNhiOTlEQ0smUq+AQDFDAOBxDCjy3/r1ittC2bQpK",
	"Xxvvyoprb6lr0QhrTJ2cDM4hhRmSU0ZDAf1e3suhTcFY1MIqKOCol/eOIAUruArXZ8KqzLFg9G8TZP8w",
	"FkmwMvq8hAI+Ip9YNQw+KRA6a7SL4P/Pc/+QRjPqECqsrZUMwdmN8zA6UiJYy1J5k6gH5C9h5fMwTXFF",
	"1IxvUHKkWqKTpCxHOhGBP1+WEYqrhwW8GrWjFNy0aQTNI/TEIc2QEreKXlPOHBOKZh/mw+j5LH/Ge85w",
	"hpr/WydfF6Aj6ZiUnmwj+cGHJl3oi7hGhL+he2foFsll0mjty7ub8WX0PuucH5Hu533/eCTOnWJZKT1J",
	"BmTYSFO7CH+FLyZNOgTJwSWOh0beIh9GmBWKmqufu6B96lxe2YV2o/cW4Cs1ddvE8df8mCrCEoqrpd9o",
	"j0799vkR9wg8kRXK28h21s9kJTjz34cafVyAYI3bQn1gHF/0zyrBZxvuER46PjXl/E+O4boK3qX9i9+A",
	"9NXztJRi3ynyRU42REkOLJn7+eFKtcaUWLtdXXrR/xp93rRNS8HhVDE27qlZEgr2Ei3g2lAjGApQmt+/",
	"W68QpRknSH4hqHJL8dJl3bea7jSW38fz5+dElbDKlK5wbWR4OkGrA0Ek5k8yBuovmbt9xf6iHCedoA/1",
	"zRaqbPcR+bwM25REg4zkwpXKY/EbFlLQIqzzUJSHc5TuaOPRm7bOP90br1fZ/wQEVWOyuCCjUlOqu3+r",
	"IstqI0VdGcfFcX6cQztqfwUAAP//5Wymc78JAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
